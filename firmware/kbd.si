	.file	1 "kbd.c"
	.section .mdebug.abi32
	.previous
	.nan	legacy
	.gnu_attribute 4, 1
	.globl	trans
	.rdata
	.align	2
	.type	trans, @object
	.size	trans, 256
trans:
	.byte	-1
	.byte	67
	.byte	65
	.byte	63
	.byte	61
	.byte	59
	.byte	60
	.byte	88
	.byte	100
	.byte	68
	.byte	66
	.byte	64
	.byte	62
	.byte	15
	.byte	41
	.byte	89
	.byte	101
	.byte	56
	.byte	42
	.byte	112
	.byte	29
	.byte	16
	.byte	2
	.byte	90
	.byte	102
	.byte	113
	.byte	44
	.byte	31
	.byte	30
	.byte	17
	.byte	3
	.byte	91
	.byte	103
	.byte	46
	.byte	45
	.byte	32
	.byte	18
	.byte	5
	.byte	4
	.byte	92
	.byte	104
	.byte	57
	.byte	47
	.byte	33
	.byte	20
	.byte	19
	.byte	6
	.byte	93
	.byte	105
	.byte	49
	.byte	48
	.byte	35
	.byte	34
	.byte	21
	.byte	7
	.byte	94
	.byte	106
	.byte	114
	.byte	50
	.byte	36
	.byte	22
	.byte	8
	.byte	9
	.byte	95
	.byte	107
	.byte	51
	.byte	37
	.byte	23
	.byte	24
	.byte	11
	.byte	10
	.byte	96
	.byte	108
	.byte	52
	.byte	53
	.byte	38
	.byte	39
	.byte	25
	.byte	12
	.byte	97
	.byte	109
	.byte	115
	.byte	40
	.byte	116
	.byte	26
	.byte	13
	.byte	98
	.byte	110
	.byte	58
	.byte	54
	.byte	28
	.byte	27
	.byte	117
	.byte	43
	.byte	99
	.byte	118
	.byte	85
	.byte	86
	.byte	119
	.byte	120
	.byte	121
	.byte	122
	.byte	14
	.byte	123
	.byte	124
	.byte	79
	.byte	125
	.byte	75
	.byte	71
	.byte	126
	.byte	127
	.byte	111
	.byte	82
	.byte	83
	.byte	80
	.byte	76
	.byte	77
	.byte	72
	.byte	1
	.byte	69
	.byte	87
	.byte	78
	.byte	81
	.byte	74
	.byte	55
	.byte	73
	.byte	70
	.byte	84
	.byte	0
	.byte	0
	.byte	0
	.byte	65
	.byte	127
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	-32
	.byte	-31
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	-16
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.align	2
	.type	cmap, @object
	.size	cmap, 384
cmap:
	.byte	0
	.byte	0
	.byte	0
	.byte	27
	.byte	27
	.byte	1
	.byte	49
	.byte	33
	.byte	1
	.byte	50
	.byte	64
	.byte	1
	.byte	51
	.byte	35
	.byte	1
	.byte	52
	.byte	36
	.byte	1
	.byte	53
	.byte	37
	.byte	1
	.byte	54
	.byte	94
	.byte	1
	.byte	55
	.byte	38
	.byte	1
	.byte	56
	.byte	42
	.byte	1
	.byte	57
	.byte	40
	.byte	1
	.byte	48
	.byte	41
	.byte	1
	.byte	45
	.byte	95
	.byte	1
	.byte	61
	.byte	43
	.byte	1
	.byte	8
	.byte	8
	.byte	1
	.byte	9
	.byte	9
	.byte	1
	.byte	113
	.byte	81
	.byte	1
	.byte	119
	.byte	87
	.byte	1
	.byte	101
	.byte	69
	.byte	1
	.byte	114
	.byte	82
	.byte	1
	.byte	116
	.byte	84
	.byte	1
	.byte	121
	.byte	89
	.byte	1
	.byte	117
	.byte	85
	.byte	1
	.byte	105
	.byte	73
	.byte	1
	.byte	111
	.byte	79
	.byte	1
	.byte	112
	.byte	80
	.byte	1
	.byte	91
	.byte	123
	.byte	1
	.byte	93
	.byte	125
	.byte	1
	.byte	10
	.byte	10
	.byte	1
	.byte	0
	.byte	0
	.byte	3
	.byte	97
	.byte	65
	.byte	1
	.byte	115
	.byte	83
	.byte	1
	.byte	100
	.byte	68
	.byte	1
	.byte	102
	.byte	70
	.byte	1
	.byte	103
	.byte	71
	.byte	1
	.byte	104
	.byte	72
	.byte	1
	.byte	106
	.byte	74
	.byte	1
	.byte	107
	.byte	75
	.byte	1
	.byte	108
	.byte	76
	.byte	1
	.byte	59
	.byte	58
	.byte	1
	.byte	39
	.byte	34
	.byte	1
	.byte	96
	.byte	126
	.byte	1
	.byte	0
	.byte	0
	.byte	5
	.byte	92
	.byte	124
	.byte	1
	.byte	122
	.byte	90
	.byte	1
	.byte	120
	.byte	88
	.byte	1
	.byte	99
	.byte	67
	.byte	1
	.byte	118
	.byte	86
	.byte	1
	.byte	98
	.byte	66
	.byte	1
	.byte	110
	.byte	78
	.byte	1
	.byte	109
	.byte	77
	.byte	1
	.byte	44
	.byte	60
	.byte	1
	.byte	46
	.byte	62
	.byte	1
	.byte	47
	.byte	63
	.byte	1
	.byte	0
	.byte	0
	.byte	6
	.byte	42
	.byte	42
	.byte	1
	.byte	0
	.byte	0
	.byte	4
	.byte	32
	.byte	32
	.byte	1
	.byte	0
	.byte	0
	.byte	8
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	7
	.byte	0
	.byte	0
	.byte	9
	.byte	18
	.byte	55
	.byte	2
	.byte	23
	.byte	56
	.byte	2
	.byte	20
	.byte	57
	.byte	2
	.byte	45
	.byte	45
	.byte	1
	.byte	26
	.byte	52
	.byte	2
	.byte	22
	.byte	53
	.byte	2
	.byte	25
	.byte	54
	.byte	2
	.byte	43
	.byte	43
	.byte	1
	.byte	19
	.byte	49
	.byte	2
	.byte	24
	.byte	50
	.byte	2
	.byte	21
	.byte	51
	.byte	2
	.byte	16
	.byte	48
	.byte	2
	.byte	17
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	60
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.byte	10
	.byte	14
	.byte	14
	.byte	0
	.byte	14
	.byte	14
	.byte	0
	.byte	15
	.byte	15
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	kbd
	.data
	.align	2
	.type	kbd, @object
	.size	kbd, 4
kbd:
	.word	-1048576

	.comm	buf,16,4

	.comm	buf_write,4,4

	.comm	buf_read,4,4
	.text
	.align	2
	.globl	next_read
	.set	nomips16
	.set	nomicromips
	.ent	next_read
	.type	next_read, @function
next_read:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	lui	$2,%hi(buf_read)
	lw	$2,%lo(buf_read)($2)
	nop
	addiu	$3,$2,1
	li	$2,-2147483648			# 0xffffffff80000000
	ori	$2,$2,0xf
	and	$2,$3,$2
	bgez	$2,$L2
	nop

	addiu	$2,$2,-1
	li	$3,-16			# 0xfffffffffffffff0
	or	$2,$2,$3
	addiu	$2,$2,1
$L2:
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	next_read
	.size	next_read, .-next_read
	.align	2
	.globl	next_write
	.set	nomips16
	.set	nomicromips
	.ent	next_write
	.type	next_write, @function
next_write:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	lui	$2,%hi(buf_write)
	lw	$2,%lo(buf_write)($2)
	nop
	addiu	$3,$2,1
	li	$2,-2147483648			# 0xffffffff80000000
	ori	$2,$2,0xf
	and	$2,$3,$2
	bgez	$2,$L5
	nop

	addiu	$2,$2,-1
	li	$3,-16			# 0xfffffffffffffff0
	or	$2,$2,$3
	addiu	$2,$2,1
$L5:
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	next_write
	.size	next_write, .-next_write
	.align	2
	.globl	get_from_buf
	.set	nomips16
	.set	nomicromips
	.ent	get_from_buf
	.type	get_from_buf, @function
get_from_buf:
	.frame	$fp,32,$31		# vars= 8, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$fp,24($sp)
	move	$fp,$sp
	j	$L8
	nop

$L10:
	nop
$L9:
	lui	$2,%hi(kbd)
	lw	$2,%lo(kbd)($2)
	nop
	addiu	$2,$2,4
	lw	$2,0($2)
	nop
	beq	$2,$0,$L9
	nop

	lui	$2,%hi(kbd)
	lw	$2,%lo(kbd)($2)
	nop
	lw	$2,0($2)
	nop
	andi	$2,$2,0x00ff
	move	$4,$2
	jal	scproc
	nop

$L8:
	lui	$2,%hi(buf_write)
	lw	$3,%lo(buf_write)($2)
	lui	$2,%hi(buf_read)
	lw	$2,%lo(buf_read)($2)
	nop
	beq	$3,$2,$L10
	nop

	lui	$2,%hi(buf_read)
	lw	$3,%lo(buf_read)($2)
	lui	$2,%hi(buf)
	addiu	$2,$2,%lo(buf)
	addu	$2,$3,$2
	lbu	$2,0($2)
	nop
	sb	$2,16($fp)
	jal	next_read
	nop

	move	$3,$2
	lui	$2,%hi(buf_read)
	sw	$3,%lo(buf_read)($2)
	lb	$2,16($fp)
	move	$sp,$fp
	lw	$31,28($sp)
	lw	$fp,24($sp)
	addiu	$sp,$sp,32
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	get_from_buf
	.size	get_from_buf, .-get_from_buf
	.align	2
	.globl	add_to_buf
	.set	nomips16
	.set	nomicromips
	.ent	add_to_buf
	.type	add_to_buf, @function
add_to_buf:
	.frame	$fp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$fp,16($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,24($fp)
	jal	next_write
	nop

	move	$3,$2
	lui	$2,%hi(buf_read)
	lw	$2,%lo(buf_read)($2)
	nop
	bne	$3,$2,$L13
	nop

	j	$L12
	nop

$L13:
	lui	$2,%hi(buf_write)
	lw	$3,%lo(buf_write)($2)
	lui	$2,%hi(buf)
	addiu	$2,$2,%lo(buf)
	addu	$2,$3,$2
	lbu	$3,24($fp)
	nop
	sb	$3,0($2)
	jal	next_write
	nop

	move	$3,$2
	lui	$2,%hi(buf_write)
	sw	$3,%lo(buf_write)($2)
$L12:
	move	$sp,$fp
	lw	$31,20($sp)
	lw	$fp,16($sp)
	addiu	$sp,$sp,24
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	add_to_buf
	.size	add_to_buf, .-add_to_buf

	.comm	escaped,4,4

	.comm	breaked,4,4

	.comm	num_lock,4,4

	.comm	caps_lock,4,4

	.comm	scroll_lock,4,4

	.comm	control,4,4

	.comm	altkey,4,4

	.comm	shift,4,4
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	key
	.type	key, @function
key:
	.frame	$fp,16,$31		# vars= 8, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-16
	sw	$fp,12($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,16($fp)
	lb	$2,16($fp)
	nop
	bgez	$2,$L16
	nop

	move	$2,$0
	j	$L17
	nop

$L16:
	lbu	$2,16($fp)
	nop
	sltu	$2,$2,16
	bne	$2,$0,$L18
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,26
	bne	$2,$0,$L19
	nop

$L18:
	lbu	$2,16($fp)
	nop
	sltu	$2,$2,30
	bne	$2,$0,$L20
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,39
	bne	$2,$0,$L19
	nop

$L20:
	lbu	$2,16($fp)
	nop
	sltu	$2,$2,44
	bne	$2,$0,$L21
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,51
	beq	$2,$0,$L21
	nop

$L19:
	lbu	$3,16($fp)
	lui	$2,%hi(caps_lock)
	lw	$4,%lo(caps_lock)($2)
	lui	$2,%hi(shift)
	lw	$2,%lo(shift)($2)
	nop
	xor	$2,$4,$2
	sltu	$2,$0,$2
	andi	$2,$2,0x00ff
	move	$5,$2
	lui	$4,%hi(cmap)
	move	$2,$3
	sll	$2,$2,1
	addu	$2,$2,$3
	addu	$3,$2,$5
	addiu	$2,$4,%lo(cmap)
	addu	$2,$3,$2
	lbu	$2,0($2)
	nop
	sb	$2,0($fp)
	j	$L22
	nop

$L21:
	lbu	$3,16($fp)
	lui	$2,%hi(shift)
	lw	$5,%lo(shift)($2)
	lui	$4,%hi(cmap)
	move	$2,$3
	sll	$2,$2,1
	addu	$2,$2,$3
	addu	$3,$2,$5
	addiu	$2,$4,%lo(cmap)
	addu	$2,$3,$2
	lbu	$2,0($2)
	nop
	sb	$2,0($fp)
$L22:
	lbu	$2,0($fp)
$L17:
	move	$sp,$fp
	lw	$fp,12($sp)
	addiu	$sp,$sp,16
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	key
	.size	key, .-key
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	npd
	.type	npd, @function
npd:
	.frame	$fp,16,$31		# vars= 8, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-16
	sw	$fp,12($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,16($fp)
	lb	$2,16($fp)
	nop
	bgez	$2,$L24
	nop

	move	$2,$0
	j	$L25
	nop

$L24:
	lbu	$3,16($fp)
	lui	$2,%hi(num_lock)
	lw	$4,%lo(num_lock)($2)
	lui	$2,%hi(shift)
	lw	$2,%lo(shift)($2)
	nop
	xor	$2,$4,$2
	sltu	$2,$0,$2
	andi	$2,$2,0x00ff
	move	$5,$2
	lui	$4,%hi(cmap)
	move	$2,$3
	sll	$2,$2,1
	addu	$2,$2,$3
	addu	$3,$2,$5
	addiu	$2,$4,%lo(cmap)
	addu	$2,$3,$2
	lbu	$2,0($2)
	nop
	sb	$2,0($fp)
	lbu	$2,0($fp)
$L25:
	move	$sp,$fp
	lw	$fp,12($sp)
	addiu	$sp,$sp,16
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	npd
	.size	npd, .-npd
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	ctr
	.type	ctr, @function
ctr:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,8($fp)
	lb	$2,8($fp)
	nop
	bgez	$2,$L27
	nop

	lui	$2,%hi(control)
	sw	$0,%lo(control)($2)
	j	$L28
	nop

$L27:
	lui	$2,%hi(control)
	li	$3,1			# 0x1
	sw	$3,%lo(control)($2)
$L28:
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	ctr
	.size	ctr, .-ctr
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	alt
	.type	alt, @function
alt:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,8($fp)
	lb	$2,8($fp)
	nop
	bgez	$2,$L31
	nop

	lui	$2,%hi(altkey)
	li	$3,1			# 0x1
	sw	$3,%lo(altkey)($2)
	j	$L32
	nop

$L31:
	lui	$2,%hi(altkey)
	sw	$0,%lo(altkey)($2)
$L32:
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	alt
	.size	alt, .-alt
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	lsh
	.type	lsh, @function
lsh:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,8($fp)
	lb	$2,8($fp)
	nop
	bgez	$2,$L35
	nop

	lui	$2,%hi(shift)
	sw	$0,%lo(shift)($2)
	j	$L36
	nop

$L35:
	lui	$2,%hi(shift)
	li	$3,1			# 0x1
	sw	$3,%lo(shift)($2)
$L36:
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	lsh
	.size	lsh, .-lsh
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	rsh
	.type	rsh, @function
rsh:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,8($fp)
	lb	$2,8($fp)
	nop
	bgez	$2,$L39
	nop

	lui	$2,%hi(shift)
	sw	$0,%lo(shift)($2)
	j	$L40
	nop

$L39:
	lui	$2,%hi(shift)
	li	$3,1			# 0x1
	sw	$3,%lo(shift)($2)
$L40:
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rsh
	.size	rsh, .-rsh
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	num
	.type	num, @function
num:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	num
	.size	num, .-num
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	cps
	.type	cps, @function
cps:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	cps
	.size	cps, .-cps
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	scr
	.type	scr, @function
scr:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scr
	.size	scr, .-scr
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	fun
	.type	fun, @function
fun:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	move	$2,$0
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	fun
	.size	fun, .-fun
	.align	2
	.set	nomips16
	.set	nomicromips
	.ent	esc
	.type	esc, @function
esc:
	.frame	$fp,32,$31		# vars= 8, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$fp,24($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,32($fp)
	lbu	$2,32($fp)
	nop
	andi	$2,$2,0x7f
	sb	$2,16($fp)
	lui	$2,%hi(escaped)
	sw	$0,%lo(escaped)($2)
	lbu	$3,16($fp)
	li	$2,29			# 0x1d
	bne	$3,$2,$L51
	nop

	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	ctr
	nop

	j	$L52
	nop

$L51:
	lbu	$3,16($fp)
	li	$2,42			# 0x2a
	bne	$3,$2,$L53
	nop

	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	lsh
	nop

	j	$L52
	nop

$L53:
	lbu	$3,16($fp)
	li	$2,54			# 0x36
	bne	$3,$2,$L54
	nop

	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	rsh
	nop

	j	$L52
	nop

$L54:
	lbu	$3,16($fp)
	li	$2,56			# 0x38
	bne	$3,$2,$L55
	nop

	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	alt
	nop

	j	$L52
	nop

$L55:
	lbu	$2,16($fp)
	nop
	sltu	$2,$2,71
	bne	$2,$0,$L56
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,84
	beq	$2,$0,$L56
	nop

	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	npd
	nop

	j	$L52
	nop

$L56:
	lbu	$3,16($fp)
	li	$2,28			# 0x1c
	beq	$3,$2,$L57
	nop

	lbu	$3,16($fp)
	li	$2,53			# 0x35
	beq	$3,$2,$L57
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,91
	bne	$2,$0,$L58
	nop

	lbu	$2,16($fp)
	nop
	sltu	$2,$2,94
	beq	$2,$0,$L58
	nop

$L57:
	lbu	$2,32($fp)
	nop
	move	$4,$2
	jal	key
	nop

	j	$L52
	nop

$L58:
	move	$2,$0
$L52:
	move	$sp,$fp
	lw	$31,28($sp)
	lw	$fp,24($sp)
	addiu	$sp,$sp,32
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	esc
	.size	esc, .-esc
	.align	2
	.globl	scproc
	.set	nomips16
	.set	nomicromips
	.ent	scproc
	.type	scproc, @function
scproc:
	.frame	$fp,32,$31		# vars= 8, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$fp,24($sp)
	move	$fp,$sp
	move	$2,$4
	sb	$2,32($fp)
	lbu	$3,32($fp)
	lui	$2,%hi(trans)
	addiu	$2,$2,%lo(trans)
	addu	$2,$3,$2
	lbu	$2,0($2)
	nop
	sb	$2,17($fp)
	lbu	$3,17($fp)
	li	$2,224			# 0xe0
	beq	$3,$2,$L60
	nop

	lbu	$3,17($fp)
	li	$2,225			# 0xe1
	bne	$3,$2,$L61
	nop

$L60:
	lui	$2,%hi(escaped)
	li	$3,1			# 0x1
	sw	$3,%lo(escaped)($2)
	j	$L59
	nop

$L61:
	lbu	$3,17($fp)
	li	$2,240			# 0xf0
	bne	$3,$2,$L63
	nop

	lui	$2,%hi(breaked)
	li	$3,1			# 0x1
	sw	$3,%lo(breaked)($2)
	j	$L59
	nop

$L63:
	lui	$2,%hi(breaked)
	lw	$2,%lo(breaked)($2)
	nop
	andi	$2,$2,0x00ff
	sll	$2,$2,7
	andi	$3,$2,0x00ff
	lbu	$2,17($fp)
	nop
	or	$2,$3,$2
	sb	$2,17($fp)
	lui	$2,%hi(breaked)
	sw	$0,%lo(breaked)($2)
	lui	$2,%hi(escaped)
	lw	$3,%lo(escaped)($2)
	li	$2,1			# 0x1
	bne	$3,$2,$L64
	nop

	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	esc
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L64:
	lbu	$2,17($fp)
	nop
	andi	$3,$2,0x7f
	lui	$4,%hi(cmap)
	move	$2,$3
	sll	$2,$2,1
	addu	$2,$2,$3
	addiu	$3,$4,%lo(cmap)
	addu	$2,$2,$3
	lb	$2,2($2)
	nop
	sltu	$3,$2,11
	beq	$3,$0,$L78
	nop

	sll	$3,$2,2
	lui	$2,%hi($L68)
	addiu	$2,$2,%lo($L68)
	addu	$2,$3,$2
	lw	$2,0($2)
	nop
	j	$2
	nop

	.rdata
	.align	2
	.align	2
$L68:
	.word	$L78
	.word	$L67
	.word	$L69
	.word	$L70
	.word	$L71
	.word	$L72
	.word	$L73
	.word	$L74
	.word	$L75
	.word	$L76
	.word	$L77
	.text
$L67:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	key
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L69:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	npd
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L70:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	ctr
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L71:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	alt
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L72:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	lsh
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L73:
	lbu	$2,17($fp)
	nop
	move	$4,$2
	jal	rsh
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L74:
	jal	num
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L75:
	jal	cps
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L76:
	jal	scr
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L77:
	jal	fun
	nop

	sb	$2,16($fp)
	j	$L65
	nop

$L78:
	nop
$L65:
	lbu	$2,16($fp)
	nop
	beq	$2,$0,$L59
	nop

	lb	$2,16($fp)
	nop
	move	$4,$2
	jal	add_to_buf
	nop

$L59:
	move	$sp,$fp
	lw	$31,28($sp)
	lw	$fp,24($sp)
	addiu	$sp,$sp,32
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scproc
	.size	scproc, .-scproc
	.align	2
	.globl	kbd_irq
	.set	nomips16
	.set	nomicromips
	.ent	kbd_irq
	.type	kbd_irq, @function
kbd_irq:
	.frame	$fp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$fp,16($sp)
	move	$fp,$sp
	lui	$2,%hi(kbd)
	lw	$2,%lo(kbd)($2)
	nop
	lw	$2,0($2)
	nop
	andi	$2,$2,0x00ff
	move	$4,$2
	jal	scproc
	nop

	move	$sp,$fp
	lw	$31,20($sp)
	lw	$fp,16($sp)
	addiu	$sp,$sp,24
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	kbd_irq
	.size	kbd_irq, .-kbd_irq
	.align	2
	.globl	scan_char
	.set	nomips16
	.set	nomicromips
	.ent	scan_char
	.type	scan_char, @function
scan_char:
	.frame	$fp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$fp,16($sp)
	move	$fp,$sp
	sw	$4,24($fp)
	jal	get_from_buf
	nop

	move	$3,$2
	lw	$2,24($fp)
	nop
	sb	$3,0($2)
	lw	$2,24($fp)
	nop
	lb	$2,0($2)
	nop
	move	$3,$2
	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	move	$4,$3
	move	$5,$2
	jal	print_char
	nop

	move	$sp,$fp
	lw	$31,20($sp)
	lw	$fp,16($sp)
	addiu	$sp,$sp,24
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scan_char
	.size	scan_char, .-scan_char
	.align	2
	.globl	scan_str
	.set	nomips16
	.set	nomicromips
	.ent	scan_str
	.type	scan_str, @function
scan_str:
	.frame	$fp,32,$31		# vars= 8, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$fp,24($sp)
	move	$fp,$sp
	sw	$4,32($fp)
	sw	$0,16($fp)
$L87:
	jal	get_from_buf
	nop

	sb	$2,20($fp)
	lb	$3,20($fp)
	li	$2,10			# 0xa
	bne	$3,$2,$L82
	nop

	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	li	$4,10			# 0xa
	move	$5,$2
	jal	print_char
	nop

	lw	$2,16($fp)
	lw	$3,32($fp)
	nop
	addu	$2,$3,$2
	sb	$0,0($2)
	j	$L88
	nop

$L82:
	lb	$3,20($fp)
	li	$2,8			# 0x8
	bne	$3,$2,$L84
	nop

	lw	$2,16($fp)
	nop
	beq	$2,$0,$L86
	nop

	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	li	$4,8			# 0x8
	move	$5,$2
	jal	print_char
	nop

	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	li	$4,32			# 0x20
	move	$5,$2
	jal	print_char
	nop

	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	li	$4,8			# 0x8
	move	$5,$2
	jal	print_char
	nop

	lw	$2,16($fp)
	nop
	addiu	$2,$2,-1
	sw	$2,16($fp)
	j	$L87
	nop

$L84:
	lb	$3,20($fp)
	lui	$2,%hi(scan_attr)
	lb	$2,%lo(scan_attr)($2)
	move	$4,$3
	move	$5,$2
	jal	print_char
	nop

	lw	$2,16($fp)
	lw	$3,32($fp)
	nop
	addu	$2,$3,$2
	lbu	$3,20($fp)
	nop
	sb	$3,0($2)
	lw	$2,16($fp)
	nop
	addiu	$2,$2,1
	sw	$2,16($fp)
$L86:
	j	$L87
	nop

$L88:
	move	$sp,$fp
	lw	$31,28($sp)
	lw	$fp,24($sp)
	addiu	$sp,$sp,32
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scan_str
	.size	scan_str, .-scan_str
	.align	2
	.globl	scan_int
	.set	nomips16
	.set	nomicromips
	.ent	scan_int
	.type	scan_int, @function
scan_int:
	.frame	$fp,280,$31		# vars= 256, regs= 2/0, args= 16, gp= 0
	.mask	0xc0000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-280
	sw	$31,276($sp)
	sw	$fp,272($sp)
	move	$fp,$sp
	sw	$4,280($fp)
	addiu	$2,$fp,16
	move	$4,$2
	jal	scan_str
	nop

	addiu	$2,$fp,16
	move	$4,$2
	lw	$5,280($fp)
	jal	str_to_int
	nop

	move	$sp,$fp
	lw	$31,276($sp)
	lw	$fp,272($sp)
	addiu	$sp,$sp,280
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scan_int
	.size	scan_int, .-scan_int
	.align	2
	.globl	kbd_init
	.set	nomips16
	.set	nomicromips
	.ent	kbd_init
	.type	kbd_init, @function
kbd_init:
	.frame	$fp,8,$31		# vars= 0, regs= 1/0, args= 0, gp= 0
	.mask	0x40000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-8
	sw	$fp,4($sp)
	move	$fp,$sp
	lui	$2,%hi(buf_write)
	sw	$0,%lo(buf_write)($2)
	lui	$2,%hi(buf_read)
	sw	$0,%lo(buf_read)($2)
	lui	$2,%hi(escaped)
	sw	$0,%lo(escaped)($2)
	lui	$2,%hi(breaked)
	sw	$0,%lo(breaked)($2)
	lui	$2,%hi(num_lock)
	sw	$0,%lo(num_lock)($2)
	lui	$2,%hi(caps_lock)
	sw	$0,%lo(caps_lock)($2)
	lui	$2,%hi(scroll_lock)
	sw	$0,%lo(scroll_lock)($2)
	lui	$2,%hi(control)
	sw	$0,%lo(control)($2)
	lui	$2,%hi(altkey)
	sw	$0,%lo(altkey)($2)
	lui	$2,%hi(shift)
	sw	$0,%lo(shift)($2)
	move	$sp,$fp
	lw	$fp,4($sp)
	addiu	$sp,$sp,8
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	kbd_init
	.size	kbd_init, .-kbd_init
	.ident	"GCC: (GNU) 4.9.2"
